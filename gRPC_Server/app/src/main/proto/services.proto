//definimos el paquete para evitar conflictos de nombres
syntax = "proto3"; //definimos la version de proto a utilizar
package proto_services;

import "google/protobuf/empty.proto"; // para definir un mensaje vacio

option java_multiple_files = true; // genera un archivo por cada mensaje
option java_package = "com.example.proto.services"; //paquete de la clase generada
option java_outer_classname = "ServicesProto"; //nombre de la clase wrapper generada

service ProductService {
    rpc GetProduct(ProductRequest) returns (ProductResponse); //metodo que recibe un ProductRequest y devuelve un ProductResponse
}

message ProductRequest {
    string name = 1; //nombre del producto
}

message ProductResponse {
    string name = 1; //nombre del producto
    string description = 2; //descripcion del producto
    double price = 3; //precio del producto
}


service ChatService {
    rpc Chat(stream ChatMessage) returns (stream ChatMessage); //metodo que recibe un ChatMessage y devuelve un ChatResponse
    rpc ConnectToRoom(ConnectToRoomRequest) returns (ConnectToRoomResponse); //metodo que recibe un ConnectToRoomRequest y devuelve un ConnectToRoomResponse
    rpc GetRooms(google.protobuf.Empty) returns (GetRoomsResponse); //metodo que recibe un GetRoomsRequest y devuelve un GetRoomsResponse
}

message ChatMessage{
    string sender = 1; //nombre del remitente
    string message = 2; //mensaje
    Room room = 3; //sala a la que pertenece el mensaje
}

message Room{
    int32 id = 1; //id de la sala
    string name = 2; //nombre de la sala
    string description = 3; //descripcion de la sala
}
message GetRoomsResponse{
    repeated Room rooms = 1; //lista de salas
}

message ConnectToRoomRequest{
    int32 room = 1; //sala a la que nos queremos conectar
}

message ConnectToRoomResponse{
    Room room = 1; //sala a la que nos conectamos
}
/*
 * This source file was generated by the Gradle 'init' task
 */
package grpc_trabajo;

import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

import grpc_trabajo.impl.ProductServiceImpl;
import io.grpc.Grpc;
import io.grpc.InsecureServerCredentials;
import io.grpc.Server;

public class App {
    private static final Logger logger = Logger.getLogger(App.class.getName());
    private Server server;

    private void start() throws IOException {

        int port = 50051; //puerto de la aplicacion por defecto

        ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(2); //hilos que utilizara para manejar las peticiones rpc
        server = Grpc.newServerBuilderForPort(port, InsecureServerCredentials.create())
        .executor(executor)
        .addService(new ProductServiceImpl())
        .build()
        .start(); //inicia el servidor y agrega el servicio
        logger.info("Server started, listening on " + port);
        Runtime.getRuntime().addShutdownHook(new Thread() {
        @Override
        public void run() {
            // Use stderr here since the logger may have been reset by its JVM shutdown hook.
            System.err.println("*** shutting down gRPC server since JVM is shutting down");
            try {
            App.this.stop();
            } catch (InterruptedException e) {
            if (server != null) {
                server.shutdownNow();
            }
            e.printStackTrace(System.err);
            } finally {
            executor.shutdown();
            }
            System.err.println("*** server shut down");
        }
        });  
    }

    private void stop() throws InterruptedException {
        if (server != null) {
        server.shutdown().awaitTermination(30, TimeUnit.SECONDS);
        }
    }

    /**
     * Await termination on the main thread since the grpc library uses daemon threads.
     */
    private void blockUntilShutdown() throws InterruptedException {
        if (server != null) {
        server.awaitTermination();
        }
    }

    /**
   * Main launches the server from the command line.
   */
    public static void main(String[] args) throws IOException, InterruptedException {
        final App server = new App();
        server.start();
        server.blockUntilShutdown();
    }
}
